2017-10-11 16:45:26,427 INFO  HistoryTestLogger - In function 'populateTblToHistoryMap', returning 'tblToHistoryCount' = {dbtest01_finance.savings_acct=[Ljava.lang.String;@40ccd03c, dbtest01_finance.credit_acct=[Ljava.lang.String;@4e0b3655, dbtest01_finance.checking_acct=[Ljava.lang.String;@4a34bb4c, dbtest01_finance.checking_acct_1=[Ljava.lang.String;@f363c6e}
2017-10-11 16:45:26,441 DEBUG HistoryTestLogger - getting connection
2017-10-11 16:45:26,446 DEBUG HistoryTestLogger - got connection
2017-10-11 16:45:26,446 INFO  HistoryTestLogger - In function 'verifyHistoryCases', parameters: 'caseType' = Overlap, 'tblToHistoryCount' = {dbtest01_finance.savings_acct=[Ljava.lang.String;@40ccd03c, dbtest01_finance.credit_acct=[Ljava.lang.String;@4e0b3655, dbtest01_finance.checking_acct=[Ljava.lang.String;@4a34bb4c, dbtest01_finance.checking_acct_1=[Ljava.lang.String;@f363c6e}
2017-10-11 16:45:26,447 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.savings_acct, CaseType: Overlap
2017-10-11 16:45:26,447 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:26,533 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Overlap, 'tableName' = dbtest01_finance.savings_acct
2017-10-11 16:45:26,533 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.savings_acct A INNER JOIN dbtest01_finance.savings_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 16:45:26,533 INFO  HistoryTestLogger - Query generated for History Overlap: select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.savings_acct A INNER JOIN dbtest01_finance.savings_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 16:45:26,872 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.credit_acct, CaseType: Overlap
2017-10-11 16:45:26,872 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:26,955 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Overlap, 'tableName' = dbtest01_finance.credit_acct
2017-10-11 16:45:26,955 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.credit_acct A INNER JOIN dbtest01_finance.credit_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 16:45:26,955 INFO  HistoryTestLogger - Query generated for History Overlap: select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.credit_acct A INNER JOIN dbtest01_finance.credit_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 16:45:27,083 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct, CaseType: Overlap
2017-10-11 16:45:27,083 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:27,131 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Overlap, 'tableName' = dbtest01_finance.checking_acct
2017-10-11 16:45:27,131 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.checking_acct A INNER JOIN dbtest01_finance.checking_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 16:45:27,131 INFO  HistoryTestLogger - Query generated for History Overlap: select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.checking_acct A INNER JOIN dbtest01_finance.checking_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 16:45:27,304 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct_1, CaseType: Overlap
2017-10-11 16:45:27,304 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:27,356 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Overlap, 'tableName' = dbtest01_finance.checking_acct_1
2017-10-11 16:45:27,356 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.checking_acct_1 A INNER JOIN dbtest01_finance.checking_acct_1 B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 16:45:27,356 INFO  HistoryTestLogger - Query generated for History Overlap: select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.checking_acct_1 A INNER JOIN dbtest01_finance.checking_acct_1 B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 16:45:27,467 INFO  HistoryTestLogger - In function 'verifyHistoryCases', parameters: 'caseType' = Gap, 'tblToHistoryCount' = {dbtest01_finance.savings_acct=[Ljava.lang.String;@40ccd03c, dbtest01_finance.credit_acct=[Ljava.lang.String;@4e0b3655, dbtest01_finance.checking_acct=[Ljava.lang.String;@4a34bb4c, dbtest01_finance.checking_acct_1=[Ljava.lang.String;@f363c6e}
2017-10-11 16:45:27,467 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.savings_acct, CaseType: Gap
2017-10-11 16:45:27,467 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.credit_acct, CaseType: Gap
2017-10-11 16:45:27,467 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct, CaseType: Gap
2017-10-11 16:45:27,467 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct_1, CaseType: Gap
2017-10-11 16:45:27,467 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:27,521 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Gap, 'tableName' = dbtest01_finance.checking_acct_1
2017-10-11 16:45:27,521 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS column0, A.acct_start_date AS column1, A.acct_end_date AS column2, B.acct_start_date AS strt_date_1, B.acct_end_date AS end_date_1, (CAST((CAST(B.acct_start_date AS DATE) - CAST(A.acct_end_date AS DATE)) AS DECIMAL(18,6)) * 60*60*24) + ((EXTRACT(  HOUR FROM B.acct_start_date) - EXTRACT(  HOUR FROM A.acct_end_date)) * 60*60) + ((EXTRACT(  MINUTE FROM B.acct_start_date) - EXTRACT(  MINUTE FROM A.acct_end_date)) * 60) + (EXTRACT(  SECOND FROM B.acct_start_date) - EXTRACT(  SECOND FROM A.acct_end_date)) AS SEC  from (SELECT Cust_id, acct_start_date, acct_end_date, ROW_NUMBER() OVER (PARTITION BY Cust_id ORDER BY acct_start_date ASC) AS Rank_A FROM dbtest01_finance.checking_acct_1) A INNER JOIN (SELECT Cust_id, acct_start_date, acct_end_date, ROW_NUMBER() OVER (PARTITION BY Cust_id ORDER BY acct_start_date ASC) AS Rank_B FROM dbtest01_finance.checking_acct_1) B ON COALESCE(A.Cust_id, '') = COALESCE(B.Cust_id, '') WHERE A.acct_start_date < B.acct_start_date AND SEC > 1 AND B.Rank_B = A.Rank_A + 1 GROUP BY 1, 2, 3, 4, 5, 6;
2017-10-11 16:45:27,521 INFO  HistoryTestLogger - Query generated for History Gap: select A.Cust_id AS column0, A.acct_start_date AS column1, A.acct_end_date AS column2, B.acct_start_date AS strt_date_1, B.acct_end_date AS end_date_1, (CAST((CAST(B.acct_start_date AS DATE) - CAST(A.acct_end_date AS DATE)) AS DECIMAL(18,6)) * 60*60*24) + ((EXTRACT(  HOUR FROM B.acct_start_date) - EXTRACT(  HOUR FROM A.acct_end_date)) * 60*60) + ((EXTRACT(  MINUTE FROM B.acct_start_date) - EXTRACT(  MINUTE FROM A.acct_end_date)) * 60) + (EXTRACT(  SECOND FROM B.acct_start_date) - EXTRACT(  SECOND FROM A.acct_end_date)) AS SEC  from (SELECT Cust_id, acct_start_date, acct_end_date, ROW_NUMBER() OVER (PARTITION BY Cust_id ORDER BY acct_start_date ASC) AS Rank_A FROM dbtest01_finance.checking_acct_1) A INNER JOIN (SELECT Cust_id, acct_start_date, acct_end_date, ROW_NUMBER() OVER (PARTITION BY Cust_id ORDER BY acct_start_date ASC) AS Rank_B FROM dbtest01_finance.checking_acct_1) B ON COALESCE(A.Cust_id, '') = COALESCE(B.Cust_id, '') WHERE A.acct_start_date < B.acct_start_date AND SEC > 1 AND B.Rank_B = A.Rank_A + 1 GROUP BY 1, 2, 3, 4, 5, 6;
2017-10-11 16:45:27,655 INFO  HistoryTestLogger - In function 'verifyHistoryCases', parameters: 'caseType' = Reverse, 'tblToHistoryCount' = {dbtest01_finance.savings_acct=[Ljava.lang.String;@40ccd03c, dbtest01_finance.credit_acct=[Ljava.lang.String;@4e0b3655, dbtest01_finance.checking_acct=[Ljava.lang.String;@4a34bb4c, dbtest01_finance.checking_acct_1=[Ljava.lang.String;@f363c6e}
2017-10-11 16:45:27,655 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.savings_acct, CaseType: Reverse
2017-10-11 16:45:27,655 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:27,703 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Reverse, 'tableName' = dbtest01_finance.savings_acct
2017-10-11 16:45:27,703 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select dbtest01_finance.savings_acct.Cust_id AS column0,dbtest01_finance.savings_acct.acct_start_date AS column1,dbtest01_finance.savings_acct.acct_end_date AS column2 from dbtest01_finance.savings_acct where dbtest01_finance.savings_acct.acct_start_date > dbtest01_finance.savings_acct.acct_end_date GROUP BY dbtest01_finance.savings_acct.Cust_id,dbtest01_finance.savings_acct.acct_start_date,dbtest01_finance.savings_acct.acct_end_date;
2017-10-11 16:45:27,703 INFO  HistoryTestLogger - Query generated for History Reverse: select dbtest01_finance.savings_acct.Cust_id AS column0,dbtest01_finance.savings_acct.acct_start_date AS column1,dbtest01_finance.savings_acct.acct_end_date AS column2 from dbtest01_finance.savings_acct where dbtest01_finance.savings_acct.acct_start_date > dbtest01_finance.savings_acct.acct_end_date GROUP BY dbtest01_finance.savings_acct.Cust_id,dbtest01_finance.savings_acct.acct_start_date,dbtest01_finance.savings_acct.acct_end_date;
2017-10-11 16:45:27,734 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.credit_acct, CaseType: Reverse
2017-10-11 16:45:27,734 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:27,766 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Reverse, 'tableName' = dbtest01_finance.credit_acct
2017-10-11 16:45:27,766 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select dbtest01_finance.credit_acct.Cust_id AS column0,dbtest01_finance.credit_acct.acct_start_date AS column1,dbtest01_finance.credit_acct.acct_end_date AS column2 from dbtest01_finance.credit_acct where dbtest01_finance.credit_acct.acct_start_date > dbtest01_finance.credit_acct.acct_end_date GROUP BY dbtest01_finance.credit_acct.Cust_id,dbtest01_finance.credit_acct.acct_start_date,dbtest01_finance.credit_acct.acct_end_date;
2017-10-11 16:45:27,766 INFO  HistoryTestLogger - Query generated for History Reverse: select dbtest01_finance.credit_acct.Cust_id AS column0,dbtest01_finance.credit_acct.acct_start_date AS column1,dbtest01_finance.credit_acct.acct_end_date AS column2 from dbtest01_finance.credit_acct where dbtest01_finance.credit_acct.acct_start_date > dbtest01_finance.credit_acct.acct_end_date GROUP BY dbtest01_finance.credit_acct.Cust_id,dbtest01_finance.credit_acct.acct_start_date,dbtest01_finance.credit_acct.acct_end_date;
2017-10-11 16:45:27,811 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct, CaseType: Reverse
2017-10-11 16:45:27,811 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:27,874 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Reverse, 'tableName' = dbtest01_finance.checking_acct
2017-10-11 16:45:27,874 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select dbtest01_finance.checking_acct.Cust_id AS column0,dbtest01_finance.checking_acct.acct_start_date AS column1,dbtest01_finance.checking_acct.acct_end_date AS column2 from dbtest01_finance.checking_acct where dbtest01_finance.checking_acct.acct_start_date > dbtest01_finance.checking_acct.acct_end_date GROUP BY dbtest01_finance.checking_acct.Cust_id,dbtest01_finance.checking_acct.acct_start_date,dbtest01_finance.checking_acct.acct_end_date;
2017-10-11 16:45:27,874 INFO  HistoryTestLogger - Query generated for History Reverse: select dbtest01_finance.checking_acct.Cust_id AS column0,dbtest01_finance.checking_acct.acct_start_date AS column1,dbtest01_finance.checking_acct.acct_end_date AS column2 from dbtest01_finance.checking_acct where dbtest01_finance.checking_acct.acct_start_date > dbtest01_finance.checking_acct.acct_end_date GROUP BY dbtest01_finance.checking_acct.Cust_id,dbtest01_finance.checking_acct.acct_start_date,dbtest01_finance.checking_acct.acct_end_date;
2017-10-11 16:45:28,029 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct_1, CaseType: Reverse
2017-10-11 16:45:28,029 DEBUG HistoryTestLogger - Connection made
2017-10-11 16:45:28,099 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Reverse, 'tableName' = dbtest01_finance.checking_acct_1
2017-10-11 16:45:28,099 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select dbtest01_finance.checking_acct_1.Cust_id AS column0,dbtest01_finance.checking_acct_1.acct_start_date AS column1,dbtest01_finance.checking_acct_1.acct_end_date AS column2 from dbtest01_finance.checking_acct_1 where dbtest01_finance.checking_acct_1.acct_start_date > dbtest01_finance.checking_acct_1.acct_end_date GROUP BY dbtest01_finance.checking_acct_1.Cust_id,dbtest01_finance.checking_acct_1.acct_start_date,dbtest01_finance.checking_acct_1.acct_end_date;
2017-10-11 16:45:28,099 INFO  HistoryTestLogger - Query generated for History Reverse: select dbtest01_finance.checking_acct_1.Cust_id AS column0,dbtest01_finance.checking_acct_1.acct_start_date AS column1,dbtest01_finance.checking_acct_1.acct_end_date AS column2 from dbtest01_finance.checking_acct_1 where dbtest01_finance.checking_acct_1.acct_start_date > dbtest01_finance.checking_acct_1.acct_end_date GROUP BY dbtest01_finance.checking_acct_1.Cust_id,dbtest01_finance.checking_acct_1.acct_start_date,dbtest01_finance.checking_acct_1.acct_end_date;
2017-10-11 18:00:23,833 INFO  HistoryTestLogger - In function 'populateTblToHistoryMap', returning 'tblToHistoryCount' = {dbtest01_finance.savings_acct=[Ljava.lang.String;@42dbd50d, dbtest01_finance.credit_acct=[Ljava.lang.String;@4c1c2326, dbtest01_finance.checking_acct=[Ljava.lang.String;@4823be7d, dbtest01_finance.checking_acct_1=[Ljava.lang.String;@d21291d}
2017-10-11 18:00:23,846 DEBUG HistoryTestLogger - getting connection
2017-10-11 18:00:23,849 DEBUG HistoryTestLogger - got connection
2017-10-11 18:00:23,849 INFO  HistoryTestLogger - In function 'verifyHistoryCases', parameters: 'caseType' = Overlap, 'tblToHistoryCount' = {dbtest01_finance.savings_acct=[Ljava.lang.String;@42dbd50d, dbtest01_finance.credit_acct=[Ljava.lang.String;@4c1c2326, dbtest01_finance.checking_acct=[Ljava.lang.String;@4823be7d, dbtest01_finance.checking_acct_1=[Ljava.lang.String;@d21291d}
2017-10-11 18:00:23,849 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.savings_acct, CaseType: Overlap
2017-10-11 18:00:23,849 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:23,969 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Overlap, 'tableName' = dbtest01_finance.savings_acct
2017-10-11 18:00:23,969 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.savings_acct A INNER JOIN dbtest01_finance.savings_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 18:00:23,969 INFO  HistoryTestLogger - Query generated for History Overlap: select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.savings_acct A INNER JOIN dbtest01_finance.savings_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 18:00:24,053 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.credit_acct, CaseType: Overlap
2017-10-11 18:00:24,053 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:24,128 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Overlap, 'tableName' = dbtest01_finance.credit_acct
2017-10-11 18:00:24,128 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.credit_acct A INNER JOIN dbtest01_finance.credit_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 18:00:24,128 INFO  HistoryTestLogger - Query generated for History Overlap: select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.credit_acct A INNER JOIN dbtest01_finance.credit_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 18:00:24,213 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct, CaseType: Overlap
2017-10-11 18:00:24,213 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:24,326 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Overlap, 'tableName' = dbtest01_finance.checking_acct
2017-10-11 18:00:24,326 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.checking_acct A INNER JOIN dbtest01_finance.checking_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 18:00:24,326 INFO  HistoryTestLogger - Query generated for History Overlap: select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.checking_acct A INNER JOIN dbtest01_finance.checking_acct B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 18:00:24,363 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct_1, CaseType: Overlap
2017-10-11 18:00:24,363 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:24,498 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Overlap, 'tableName' = dbtest01_finance.checking_acct_1
2017-10-11 18:00:24,498 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.checking_acct_1 A INNER JOIN dbtest01_finance.checking_acct_1 B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 18:00:24,498 INFO  HistoryTestLogger - Query generated for History Overlap: select A.Cust_id AS pk0,A.acct_start_date AS pk1,A.acct_end_date AS pk2, B.acct_start_date AS strt_dt1, B.acct_end_date AS end_dt1 from dbtest01_finance.checking_acct_1 A INNER JOIN dbtest01_finance.checking_acct_1 B ON COALESCE (A.Cust_id, '') = COALESCE(B.Cust_id, '') where (A.acct_start_date <> B.acct_start_date) and ((A.acct_start_date, A.acct_end_date) OVERLAPS (B.acct_start_date, B.acct_end_date)) GROUP BY 1, 2, 3, 4, 5;
2017-10-11 18:00:24,820 INFO  HistoryTestLogger - In function 'verifyHistoryCases', parameters: 'caseType' = Gap, 'tblToHistoryCount' = {dbtest01_finance.savings_acct=[Ljava.lang.String;@42dbd50d, dbtest01_finance.credit_acct=[Ljava.lang.String;@4c1c2326, dbtest01_finance.checking_acct=[Ljava.lang.String;@4823be7d, dbtest01_finance.checking_acct_1=[Ljava.lang.String;@d21291d}
2017-10-11 18:00:24,820 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.savings_acct, CaseType: Gap
2017-10-11 18:00:24,820 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.credit_acct, CaseType: Gap
2017-10-11 18:00:24,820 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct, CaseType: Gap
2017-10-11 18:00:24,820 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct_1, CaseType: Gap
2017-10-11 18:00:24,820 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:24,980 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Gap, 'tableName' = dbtest01_finance.checking_acct_1
2017-10-11 18:00:24,980 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select A.Cust_id AS column0, A.acct_start_date AS column1, A.acct_end_date AS column2, B.acct_start_date AS strt_date_1, B.acct_end_date AS end_date_1, (CAST((CAST(B.acct_start_date AS DATE) - CAST(A.acct_end_date AS DATE)) AS DECIMAL(18,6)) * 60*60*24) + ((EXTRACT(  HOUR FROM B.acct_start_date) - EXTRACT(  HOUR FROM A.acct_end_date)) * 60*60) + ((EXTRACT(  MINUTE FROM B.acct_start_date) - EXTRACT(  MINUTE FROM A.acct_end_date)) * 60) + (EXTRACT(  SECOND FROM B.acct_start_date) - EXTRACT(  SECOND FROM A.acct_end_date)) AS SEC  from (SELECT Cust_id, acct_start_date, acct_end_date, ROW_NUMBER() OVER (PARTITION BY Cust_id ORDER BY acct_start_date ASC) AS Rank_A FROM dbtest01_finance.checking_acct_1) A INNER JOIN (SELECT Cust_id, acct_start_date, acct_end_date, ROW_NUMBER() OVER (PARTITION BY Cust_id ORDER BY acct_start_date ASC) AS Rank_B FROM dbtest01_finance.checking_acct_1) B ON COALESCE(A.Cust_id, '') = COALESCE(B.Cust_id, '') WHERE A.acct_start_date < B.acct_start_date AND SEC > 1 AND B.Rank_B = A.Rank_A + 1 GROUP BY 1, 2, 3, 4, 5, 6;
2017-10-11 18:00:24,980 INFO  HistoryTestLogger - Query generated for History Gap: select A.Cust_id AS column0, A.acct_start_date AS column1, A.acct_end_date AS column2, B.acct_start_date AS strt_date_1, B.acct_end_date AS end_date_1, (CAST((CAST(B.acct_start_date AS DATE) - CAST(A.acct_end_date AS DATE)) AS DECIMAL(18,6)) * 60*60*24) + ((EXTRACT(  HOUR FROM B.acct_start_date) - EXTRACT(  HOUR FROM A.acct_end_date)) * 60*60) + ((EXTRACT(  MINUTE FROM B.acct_start_date) - EXTRACT(  MINUTE FROM A.acct_end_date)) * 60) + (EXTRACT(  SECOND FROM B.acct_start_date) - EXTRACT(  SECOND FROM A.acct_end_date)) AS SEC  from (SELECT Cust_id, acct_start_date, acct_end_date, ROW_NUMBER() OVER (PARTITION BY Cust_id ORDER BY acct_start_date ASC) AS Rank_A FROM dbtest01_finance.checking_acct_1) A INNER JOIN (SELECT Cust_id, acct_start_date, acct_end_date, ROW_NUMBER() OVER (PARTITION BY Cust_id ORDER BY acct_start_date ASC) AS Rank_B FROM dbtest01_finance.checking_acct_1) B ON COALESCE(A.Cust_id, '') = COALESCE(B.Cust_id, '') WHERE A.acct_start_date < B.acct_start_date AND SEC > 1 AND B.Rank_B = A.Rank_A + 1 GROUP BY 1, 2, 3, 4, 5, 6;
2017-10-11 18:00:25,124 INFO  HistoryTestLogger - In function 'verifyHistoryCases', parameters: 'caseType' = Reverse, 'tblToHistoryCount' = {dbtest01_finance.savings_acct=[Ljava.lang.String;@42dbd50d, dbtest01_finance.credit_acct=[Ljava.lang.String;@4c1c2326, dbtest01_finance.checking_acct=[Ljava.lang.String;@4823be7d, dbtest01_finance.checking_acct_1=[Ljava.lang.String;@d21291d}
2017-10-11 18:00:25,124 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.savings_acct, CaseType: Reverse
2017-10-11 18:00:25,124 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:25,156 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Reverse, 'tableName' = dbtest01_finance.savings_acct
2017-10-11 18:00:25,156 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select dbtest01_finance.savings_acct.Cust_id AS column0,dbtest01_finance.savings_acct.acct_start_date AS column1,dbtest01_finance.savings_acct.acct_end_date AS column2 from dbtest01_finance.savings_acct where dbtest01_finance.savings_acct.acct_start_date > dbtest01_finance.savings_acct.acct_end_date GROUP BY dbtest01_finance.savings_acct.Cust_id,dbtest01_finance.savings_acct.acct_start_date,dbtest01_finance.savings_acct.acct_end_date;
2017-10-11 18:00:25,156 INFO  HistoryTestLogger - Query generated for History Reverse: select dbtest01_finance.savings_acct.Cust_id AS column0,dbtest01_finance.savings_acct.acct_start_date AS column1,dbtest01_finance.savings_acct.acct_end_date AS column2 from dbtest01_finance.savings_acct where dbtest01_finance.savings_acct.acct_start_date > dbtest01_finance.savings_acct.acct_end_date GROUP BY dbtest01_finance.savings_acct.Cust_id,dbtest01_finance.savings_acct.acct_start_date,dbtest01_finance.savings_acct.acct_end_date;
2017-10-11 18:00:25,300 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.credit_acct, CaseType: Reverse
2017-10-11 18:00:25,300 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:25,343 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Reverse, 'tableName' = dbtest01_finance.credit_acct
2017-10-11 18:00:25,343 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select dbtest01_finance.credit_acct.Cust_id AS column0,dbtest01_finance.credit_acct.acct_start_date AS column1,dbtest01_finance.credit_acct.acct_end_date AS column2 from dbtest01_finance.credit_acct where dbtest01_finance.credit_acct.acct_start_date > dbtest01_finance.credit_acct.acct_end_date GROUP BY dbtest01_finance.credit_acct.Cust_id,dbtest01_finance.credit_acct.acct_start_date,dbtest01_finance.credit_acct.acct_end_date;
2017-10-11 18:00:25,343 INFO  HistoryTestLogger - Query generated for History Reverse: select dbtest01_finance.credit_acct.Cust_id AS column0,dbtest01_finance.credit_acct.acct_start_date AS column1,dbtest01_finance.credit_acct.acct_end_date AS column2 from dbtest01_finance.credit_acct where dbtest01_finance.credit_acct.acct_start_date > dbtest01_finance.credit_acct.acct_end_date GROUP BY dbtest01_finance.credit_acct.Cust_id,dbtest01_finance.credit_acct.acct_start_date,dbtest01_finance.credit_acct.acct_end_date;
2017-10-11 18:00:25,468 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct, CaseType: Reverse
2017-10-11 18:00:25,468 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:25,563 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Reverse, 'tableName' = dbtest01_finance.checking_acct
2017-10-11 18:00:25,563 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select dbtest01_finance.checking_acct.Cust_id AS column0,dbtest01_finance.checking_acct.acct_start_date AS column1,dbtest01_finance.checking_acct.acct_end_date AS column2 from dbtest01_finance.checking_acct where dbtest01_finance.checking_acct.acct_start_date > dbtest01_finance.checking_acct.acct_end_date GROUP BY dbtest01_finance.checking_acct.Cust_id,dbtest01_finance.checking_acct.acct_start_date,dbtest01_finance.checking_acct.acct_end_date;
2017-10-11 18:00:25,563 INFO  HistoryTestLogger - Query generated for History Reverse: select dbtest01_finance.checking_acct.Cust_id AS column0,dbtest01_finance.checking_acct.acct_start_date AS column1,dbtest01_finance.checking_acct.acct_end_date AS column2 from dbtest01_finance.checking_acct where dbtest01_finance.checking_acct.acct_start_date > dbtest01_finance.checking_acct.acct_end_date GROUP BY dbtest01_finance.checking_acct.Cust_id,dbtest01_finance.checking_acct.acct_start_date,dbtest01_finance.checking_acct.acct_end_date;
2017-10-11 18:00:25,672 DEBUG HistoryTestLogger - Tablename: dbtest01_finance.checking_acct_1, CaseType: Reverse
2017-10-11 18:00:25,672 DEBUG HistoryTestLogger - Connection made
2017-10-11 18:00:25,712 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', parameters: 'caseType' = Reverse, 'tableName' = dbtest01_finance.checking_acct_1
2017-10-11 18:00:25,712 INFO  HistoryTestLogger - In function 'getHistoryCaseQuery', returning 'query' = select dbtest01_finance.checking_acct_1.Cust_id AS column0,dbtest01_finance.checking_acct_1.acct_start_date AS column1,dbtest01_finance.checking_acct_1.acct_end_date AS column2 from dbtest01_finance.checking_acct_1 where dbtest01_finance.checking_acct_1.acct_start_date > dbtest01_finance.checking_acct_1.acct_end_date GROUP BY dbtest01_finance.checking_acct_1.Cust_id,dbtest01_finance.checking_acct_1.acct_start_date,dbtest01_finance.checking_acct_1.acct_end_date;
2017-10-11 18:00:25,712 INFO  HistoryTestLogger - Query generated for History Reverse: select dbtest01_finance.checking_acct_1.Cust_id AS column0,dbtest01_finance.checking_acct_1.acct_start_date AS column1,dbtest01_finance.checking_acct_1.acct_end_date AS column2 from dbtest01_finance.checking_acct_1 where dbtest01_finance.checking_acct_1.acct_start_date > dbtest01_finance.checking_acct_1.acct_end_date GROUP BY dbtest01_finance.checking_acct_1.Cust_id,dbtest01_finance.checking_acct_1.acct_start_date,dbtest01_finance.checking_acct_1.acct_end_date;
